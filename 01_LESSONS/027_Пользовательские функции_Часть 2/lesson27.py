##############################################
# 027_Пользовательские функции.Часть 2
# python 3.x
# WebForMySelf - Андрей Кудлай, 2019
##############################################
# Writing sgiman, 2025

nc = 80
print('-' * nc)


# ---------------------------------------------------------
# Выбор верхнего или нижнего регистра при наличии пробела
# ---------------------------------------------------------
def set_register(s):
    if ' ' in s:
        return s.upper()
    else:
        return s.lower()


print(set_register('Hello world'))
print(set_register('Hello,world'))
print('-' * nc)


# ---------------------------------------------------------
# get_sum_test()
# именованные аргументы
# ---------------------------------------------------------
def get_sum_test(a=0, b=0, c=0, d=1):
    return a + b + c + d


# именованные аргументы могут быть не заданы
print('get_sum_test:', get_sum_test(1, 2, d=5))  # 'c' пропущено
print('-' * nc)


# ---------------------------------------------------------
# get_sum()
# произвольное кол-во аргументов (*)
# f(*args, **kwargs)
#  *args - кортеж (позиционные аргументы)
#  **kwargs - словарь (именованные аргументы)
# ---------------------------------------------------------
def get_sum(*args):
    return sum(args)


print('get_sum:', get_sum(1, 5, 10))
print('-' * nc)


# ---------------------------------------------------------
# func()
#  **kwargs - словарь (именованные аргументы)
# ---------------------------------------------------------
def func(**kwargs):
    print('func:', kwargs)


func(a=1, b=5, c=20)
print('-' * nc)


# ---------------------------------------------------------
# f(a, x, *args, **kwargs)
#
# Комбинированные наборы аргументов:
#  a, x - позиционные аргументы - обязательны
#  *args - кортеж (позиционные аргументы) - не обязательны
#  **kwargs - словарь (именованные аргументы) - не обязательны
#
# Позиционные аргументы (по значению) являются обязательными
# (кроме кортежа и словаря аргументов)
# ---------------------------------------------------------
def f(a, x, *args, **kwargs):
    print('f():', a)
    print('f():', x)
    print('f():', args)
    print('f():', kwargs)
    print('f():', 'b =', kwargs.get('b'))
    print('f():', 'c =', kwargs.get('c'))
    # print('value:', kwargs.values())


f(1, 2, 3, 4, b='test', c='hi')
print('-' * nc)

f(1, 2)
print('-' * nc)
