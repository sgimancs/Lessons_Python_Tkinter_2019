##############################################
# 020_Кортежи
# python 3.x
# WebForMySelf - Андрей Кудлай, 2019
##############################################
# Writing sgiman, 2025

# Кортеж (tuple) - это неизменяемый список (защищённый список)

l1 = [1, 2, 3]          # список
t1 = (1, 2, 3,)         # кортеж, вариант-1 (рекомендуется)
t1 = 1, 2, 3            # кортеж, вариант-2 (упаковка кортежа)
t1 = tuple((1, 2, 3))   # кортеж, вариант-3

t1 = ()          # пустой кортеж
t1 = (1,)        # кортеж с одним элементом
t1 = (1, 2, 3)

# Кортеж занимает меньше памяти, чем список
print()
print('SIZEOF КОРТЕЖ T1:', t1.__sizeof__())  # 48 (кортеж)
print('SIZEOF СПИСОК L1:', l1.__sizeof__())  # 72 (список)

##############################################

print('-' * 20)
t1 = tuple('hello')  # создать кортеж символов
t2 = tuple(' world')
t3 = t1 + t2
print('T3 TUPLE ADD:', t3)
print('T3 LEN:', len(t3))
print('T3 (l) COUNT:', t3.count('l'))  # подсчёт символов 'l'
print()

# Найти позицию литеры 'l' в кортеже
if 'l' in t3:
    print('INDEX L:', t3.index('l'))
else:
    print('No')

print('-' * 20)
# Распечатать кортеж без пробела
for i in t3:
    if i == ' ':
        continue
    print(f'"{i}"', end=' ')

##############################################
print()
print('-' * 20)

# Поместить в кортеж изменяемые списки
t1 = (10, 11, [1, 2, 3], [4, 5, 6], ['hello', 'world'])
print('Кортеж cо списками:', t1, id(t1))

# Изменить список в кортеже
t1[4][0] = 'new'
t1[4].append('hello')
print('Кортеж c изменёнными списками:', t1, id(t1))
print()

##############################################
t1 = (1, 2, 3,)
x, y, z = t1  # Распаковка кортежа
print('РАСПАКОВКА КОРТЕЖА (X,Y,Z):', x, y, z)
print()

##############################################
# Поменять местами с помощью кортежа
x = 1
y = 2
print(x, y)
x, y = y, x
print(x, y)

"""
Дан список words. Составьте из него список слов-палиндромов. 
Попробуйте это сделать двумя способами: произвольное решение и решение в одну строчку кода.
Дан список my_str со строками, часть из которых являются палиндромами. 
Составьте новый список строк-палиндромов.
"""

# words = ['мадам', 'топот', 'test', 'madam', 'word']
# my_str = ['Око за око', 'А роза упала на лапу Азора', 'Около Миши молоко']

######################################################
# ChatGPT (ДЗ)
######################################################
print('*'*40)
print('ChatGPT:')

words = ['мадам', 'топот', 'test', 'madam', 'word']
palindromes = []

for word in words:
    if word == word[::-1]:
        palindromes.append(word)

print("Слова-палиндромы:", palindromes)

my_str = ['Око за око', 'А роза упала на лапу Азора', 'Около Миши молоко']
palindrome_sentences = []

for s in my_str:
    cleaned = ''.join(c.lower() for c in s if c.isalnum())
    if cleaned == cleaned[::-1]:
        palindrome_sentences.append(s)

print("Строки-палиндромы:", palindrome_sentences)

##############################
# Решение в одну строку:
##############################
print()
# Список слов-палиндромов
palindromes = [w for w in words if w == w[::-1]]
print("Слова-палиндромы:", palindromes)

# Список строк-палиндромов (с учетом регистров и знаков препинания)
palindrome_sentences = [s for s in my_str if ''.join(c.lower() for c in s if c.isalnum()) == ''.join(c.lower() for c in s if c.isalnum())[::-1]]
print("Строки-палиндромы:", palindrome_sentences)


