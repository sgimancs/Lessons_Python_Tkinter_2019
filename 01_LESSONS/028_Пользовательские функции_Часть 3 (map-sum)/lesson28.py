##############################################
# 028_Пользовательские функции.Часть 3
# python 3.x
# WebForMySelf - Андрей Кудлай, 2019
##############################################
# Writing sgiman, 2025

# CTRL+Q - help (description)

print()
nc = 80

print(sum((1, 2, 3, 5, 6, 7, 8, 9)))


# Функция с описанием для HELP
def get_sum(a, b):
    """
    Возвращает сумму аргументов a и b.

    :param a: Первый операнд
    :type a: int
    :param b: Второй операнд
    :type b: int
    :return: Return type int
    """
    return a + b


print('get_sum:', get_sum(1, 2))
print('-' * nc)

################################################################
# ОБЛАСТИ ВИДИМОСТИ
################################################################

a = 5  # global (видно везде, но в функциях доступ только на чтение)


# --------------------------------------------------------
# ftest()
# --------------------------------------------------------
def ftest():
    a = 10  # local
    a += 1
    print('ftest:', a)


print(a)
ftest()
print(a)
print('-' * nc)


# --------------------------------------------------------
# ftest2()
# --------------------------------------------------------
def ftest2():
    global a  # доступ для изменения глобальной переменной
    a += 1  # увеличить глобальную переменную 'a' на единицу
    print('ftest2:', a)


print(a)
ftest2()
print(a)
print('-' * nc)

# --------------------------------------------------------
# Функция для обработки списка
# --------------------------------------------------------
l = [1, '2', 3]


def f(lst):
    return [i * 2 for i in l]  # перебор списка c удвоением


print('f:', f(l))
print('-' * nc)


# --------------------------------------------------------
# Удваивание элементов списка с внутренней функцией (1)
# --------------------------------------------------------
def f1(lst):
    # Функция внутри функции
    def get_mult(x):
        return int(x) * 2

    return [get_mult(i) for i in l]


print('f1:', f1(l))
print('-' * nc)


# --------------------------------------------------------
# Удваивание элементов списка с внутренней функцией (2)
# --------------------------------------------------------
def f2(lst):
    def get_mult(x):
        if isinstance(x, int):
            return x * 2

    return [get_mult(i) for i in l if get_mult(i)]  # еcли не None


print('f2:', f2(l))
print('-' * nc)


################################################################
# Удваивание элементов списка с внутренней функцией (3)
def f3(lst):
    def get_mult(x):
        return x * 2

    return list(map(get_mult, lst))  # список с итератором и функцией (для всех типов)


print('f3:', f3(l))
print('-' * nc)

################################################################
# ДОМАШНЕЕ ЗАДАНИЕ
################################################################

"""
1. Дан массив, в котором среди прочих элементов есть слово "odd" (нечетный). 
Определите, есть ли в списке число, которое является индексом элемента "odd". 
Напишите функцию, которая будет возвращать True или False, соответственно.
"""

# def odd_ball(arr):
#    pass


# print(odd_ball(["even", 4, "even", 7, "even", 55, "even", 6, "even", 10, "odd", 3, "even"]))  # True
# print(odd_ball(["even", 4, "even", 7, "even", 55, "even", 6, "even", 9, "odd", 3, "even"]))  # False
# print(odd_ball(["even", 10, "odd", 2, "even"]))  # True

################################################################

"""
2. Напишите функцию find_sum(n), где аргумент функции - 
это конечный элемент последовательности включительно. 
Функция должна вернуть сумму всех чисел последовательности, кратных 3 или 5. 
Попробуйте решить задачу двумя способами (один из способов в одну строчку кода).
"""

# def find_sum(n):
#    pass


# find_sum(5)  # return 8 (3 + 5)
# find_sum(10)  # return 33 (3 + 5 + 6 + 9 + 10)

################################################################

"""
3. Дан список имен. Выберите в новый список только те имена, которые состоят из 4-х букв.
names = ["Ryan", "Kieran", "Mark", "John", "David", "Paul"] 
# ["Ryan", "Mark", "John", "Paul"]
"""

# def get_names(names):
#    pass


################################################################
# ChatGPT
################################################################

print('*' * nc)


# --- 1 ---
def odd_ball(arr):
    if "odd" in arr:
        index_odd = arr.index("odd")
        return index_odd in arr
    return False


print('(1) addball:', odd_ball(["even", 4, "even", 7, "even", 55, "even", 6, "even", 10, "odd", 3, "even"]))  # True
print('(1) addball:', odd_ball(["even", 4, "even", 7, "even", 55, "even", 6, "even", 9, "odd", 3, "even"]))  # False
print('(1) addball:', odd_ball(["even", 10, "odd", 2, "even"]))  # True
print('-' * nc)


# --- 2 ---
def find_sum1(n):
    total = 0
    for i in range(1, n + 1):
        if i % 3 == 0 or i % 5 == 0:
            total += i
    return total


def find_sum2(n):
    return sum(i for i in range(1, n + 1) if i % 3 == 0 or i % 5 == 0)


print(find_sum1(5))
print(find_sum2(10))
print('-' * nc)


# --- 3 ---
def get_names(names):
    return [name for name in names if len(name) == 4]


# Пример использования
list_names = ["Ryan", "Kieran", "Mark", "John", "David", "Paul"]
filtered_names = get_names(list_names)
print(filtered_names)
print('-' * nc)
